fun Matrix.solveSLE(b: DoubleArray, logMiddleResults: Boolean = false): DoubleArray? {
    val dim = elements.size
    assert(elements.all { dim == it.size })
    assert(b.size == dim)

    val xs = DoubleArray(dim) { 0.0 }
    val tmp = elements.copy().toMutableMatrix()
    var nMutations = 0;

    for (x in 0..<dim - 1) {
        if (tmp.mutateMatrixWithVector(vector = b, start = x)) {
            nMutations++
        }
        for (nextRow in x + 1..<dim) {
            val mul = -tmp.elements[nextRow][x] / tmp.elements[x][x]
            for (i in 0..<dim) {
                tmp.elements[nextRow][i] += tmp.elements[x][i] * mul
            }
            b[nextRow] += b[x] * mul
            tmp.elements[nextRow][x] = 0.0
        }
    }

    var det: Double = if (nMutations % 2 == 0) {
        1.0
    } else {
        -1.0
    } * tmp.elements.foldIndexed(1.0) { idx, acc, d ->
        acc * d[idx]
    }
    if (det.approx(0.0)) {
        return null
    }

    for (x in xs.indices.reversed()) {
        var tmpSum: Double = 0.0
        for (i in x + 1..xs.lastIndex) {
            tmpSum += tmp.elements[x][i] * xs[i]
        }
        xs[x] = (b[x] - tmpSum) / tmp.elements[x][x]
    }
    return xs
}

private fun MutableMatrix.mutateMatrixWithVector(vector: DoubleArray, start: Int): Boolean {
    var mutated = false
    var greatest: Int = start
    for (i in start..<elements.size) {
        if (elements[i][start].absoluteValue > elements[greatest][start].absoluteValue) {
            greatest = i
            mutated = true
        }
    }
    if (mutated) {
        elements[start] = elements[greatest].also { elements[greatest] = elements[start] }
        vector[start] = vector[greatest].also { vector[greatest] = vector[start] }
    }
    return mutated
}
